# Generated by Django 4.1.5 on 2023-01-13 20:46

import django.db.models.deletion

from django.db import migrations, models
from django.utils import timezone

import hardware.models


def create_default_firmware_version(apps, schema_editor):
    f = hardware.models.Firmware()
    f.created_at = timezone.now()
    f.version = 0
    f.notes = "Dummy version that will never be sent to board."
    f.bin_file = ""
    f.save()


def revert_create_default_firmware_version(apps, schema_editor):
    hardware.models.Firmware.objects.get(version=0).delete()


class Migration(migrations.Migration):
    dependencies = [
        ("hardware", "0004_station_location_vehicle_description_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Firmware",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("version", models.IntegerField(unique=True)),
                ("created_at", models.DateTimeField()),
                (
                    "bin_file",
                    models.FileField(upload_to=hardware.models.firmware_upload_to),
                ),
                ("notes", models.TextField()),
            ],
            options={
                "db_table": "firmware",
            },
        ),
        migrations.RunPython(
            create_default_firmware_version,
            reverse_code=revert_create_default_firmware_version,
        ),
        migrations.AddField(
            model_name="box",
            name="firmware_version",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="box",
            name="desired_firmware_version",
            field=models.ForeignKey(
                default=1,
                on_delete=django.db.models.deletion.PROTECT,
                to="hardware.firmware",
            ),
            preserve_default=False,
        ),
    ]
